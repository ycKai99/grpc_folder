/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */
/**
 * Payload data has the actual message sent by producer.
 */
export declare type Message = RequestMessage | ResponseMessage | NotificationMessage;
/**
 * Types of injectable services
 */
export declare type FactoryTypeEnum = "MessageCreator" | "MircroServiceProducerTopic" | "MircroServiceConsumerTopic";
/**
 * Highligh level app architecture levels
 */
export declare type AppArchitectureTiersEnum = "FisUserInterface" | "FisApplicationServer" | "SystemServers";
/**
 * Major UI components
 */
export declare type UserInterfaceComponentTypesEnum = "Presentation" | "GlobalStore" | "DomainProxy" | "Component";
/**
 * Major components of Fis Application server
 */
export declare type FisAppServerComponentsEnum = "UserClientProxy" | "NetworkController" | "BackOfficeApplication" | "MircroServiceHandler" | "QueryModule" | "NotificaationManager" | "GlobalStore";
/**
 * System softwares. Windows, NodeJs, NestJS, MicroserviceServers etc
 */
export declare type SystemServers = "OperatingSystem" | "Webservers" | "Database" | "ApplicationStake" | "QuerySystem" | "Network" | "MicroserviceServer";
/**
 * For UI Events, MS Events, NestJS Events, FIS Events
 */
export declare type NotificationType = "UserActivity" | "BusinessEvent" | "AppServerEvent" | "NetworkSystemEvent" | "SystemServerEvent";
export declare type NotificationNature = "Exception" | "ActionRequired" | "ForInformation";
export interface FisAppMessage {
    FisAppMessage: Message;
}
export interface RequestMessage {
    requestMessageHeader?: RequestMessageHeader;
    requestMessageData?: unknown;
}
/**
 * A Request can be a Command or a Query. Abstract definition and can not existing by itself. Name of request only appear at concrete type.
 */
export interface RequestMessageHeader {
    messageHeader: MessageHeader;
    /**
     * Client that request defines what sort of response expected.
     */
    responseRequirement?: {
        responseDeliveryMode?: MessageDeliveryMode;
        responseDataFormat?: MessageFormat;
        externalResponseLocation?: ExternalMessageLocation;
    };
    /**
     * If not completed within stipulated time (since message created), then cancel request. Time out in milli seconds. 0-no time out.
     */
    resquestTimeOut?: number;
    /**
     * To execute after a specified certain time (since message created), 0 as immediate, -1 as batch que
     */
    requestExecutionMode?: number;
}
/**
 * Common information for all messages. Usually used by the Controller to direct message to an appropriate handler (or service).
 */
export interface MessageHeader {
    /**
     * Unique identifier of every message
     */
    messageID: string;
    /**
     * Short description of this message. Value can be auto populated by factory.
     */
    messageName: string;
    /**
     * The date time that the message was created by the factory
     */
    dateCreated: string;
    /**
     * Whether the message data is an aggregate of messages.If true then the aggregate messages are contained in the MessageData section as array of messages.
     */
    isAggregate: boolean;
    messageProducerInformation: MessageProducerInformation;
    /**
     * Authentication and authorization information
     */
    security: {
        /**
         * Social network user id that user log on. can be null and in which case user did not use social network user id to log in but instead directly log on using FisApp user id. Note that a client can be a daemon process and in which case it also has a log in id.
         */
        socialNetworkLoginID?: string;
        /**
         * user application session client proxy. can be null if user has not log in
         */
        ucpId?: string;
        /**
         * name of social network user
         */
        socialNetworkUserName?: string;
        /**
         * FIS User ID.
         */
        applicationLogInID?: string;
        /**
         * name of application user
         */
        applicationUserName?: string;
    };
    messagedataLocation?: ExternalMessageLocation;
    messageDataFormat?: MessageFormat;
}
/**
 * Origin location ( as in app architeture components) where this message is created. Note that as message is passed to a component, a new message may be created to wrap around the first message.
 */
export interface MessageProducerInformation {
    messageProducerInformation?: {
        uiMessage?: {
            messageOriginBase: MessageProducerInformationBase;
            UIArchitectureComponents: UserInterfaceComponentTypesEnum;
        };
    } | {
        fisAppServerMessage?: {
            messageOriginBase?: MessageProducerInformationBase;
            AppServerComponents?: FisAppServerComponentsEnum;
        };
    } | {
        systemServersMessage?: {
            messageOriginBase: MessageProducerInformationBase;
            systemServers: SystemServers;
        };
    };
}
/**
 * Location of source program that generated this message
 */
export interface MessageProducerInformationBase {
    programID?: string;
    programName?: string;
    messageFactoryType?: FactoryTypeEnum;
    appArchitectureTiers?: AppArchitectureTiersEnum;
    userApplication: UserApplication;
}
/**
 * Applications as login by user. Is a logical application with a  collection of programs to perform some related business functions. It referrrs to one or more back office applications under the User-BackOffice relationship entity. Example, FisPayment, PlantationFiledApp, FisSalesForce.
 */
export interface UserApplication {
    userAppId: string;
    userAppName: string;
}
/**
 * Compositable definition. Can be included in message header or message data. For non-embaded data, specific location where data can be read. Applicatiion for all message action type.
 */
export interface ExternalMessageLocation {
    isEmbaded: boolean;
    url?: string;
    accessId?: string;
    accessPassword?: string;
    fileName?: string;
}
/**
 * Compositable definition. Data message format details which is required in different types of messages. Format can be used (1) defining message when establishing commuincation protocal  (2) defining message data section (3) defining a field in the message data section
 */
export interface MessageFormat {
    /**
     * Applicable for report query.
     */
    dataFormat: "Json" | "Xml" | "Blob" | "Dtf";
    /**
     * File type in which the message is kept. Usually correcspond to the file extension
     */
    fileFormat?: "Pdf" | "Text" | "Html" | "PrintFile";
    /**
     * The response data schema type.
     */
    schemaType?: "FisFieldValue" | "FisMetada" | "GraphQl" | "JsonSchema" | "Soap" | "Wsdl";
    mediaType?: "Audio" | "Video" | "Image" | "Text";
}
/**
 * Compositable definition. How message is to be delivered. Usually though not mendatory is as requested by client. If not specidied then leave to default transport handler. Applicable more for a requesting client message to specify how response messages should be delivered back.
 */
export interface MessageDeliveryMode {
    /**
     * Interactive message exchange or batch delayed. Interactive reponse is immediate by individually message continuous streaming. Batched messages are collected for one delivery.
     */
    timing: "Interactive" | "Batch";
    /**
     * Identifier for a particular transport channel to use.
     */
    channelId?: string;
}
export interface ResponseMessage {
    responseMessageHeader?: ResponseMessageHeader;
    responseMessageData?: unknown;
}
export interface ResponseMessageHeader {
    messageHeader: MessageHeader;
    requestMessageRespondTo: RequestMessage;
}
export interface NotificationMessage {
    notificationMessageHeader: NotificationMessageHeader;
    notificationMessageData: unknown;
}
/**
 * Base notification message Header. Notification is at time named as event.
 */
export interface NotificationMessageHeader {
    messageHeader: MessageHeader;
    notificationType: NotificationType;
    notificationNature: NotificationNature;
}
