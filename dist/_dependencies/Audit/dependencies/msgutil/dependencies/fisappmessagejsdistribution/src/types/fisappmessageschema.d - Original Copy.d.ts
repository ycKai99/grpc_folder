/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */
/**
 * Types of injectable services
 *
 * This interface was referenced by `FisAppMessage`'s JSON-Schema
 * via the `definition` "FactoryTypeEnum".
 */
export declare type FactoryTypeEnum = "MessageCreator" | "MircroServiceProducerTopic" | "MircroServiceConsumerTopic";
/**
 * Highligh level app architecture levels
 *
 * This interface was referenced by `FisAppMessage`'s JSON-Schema
 * via the `definition` "AppArchitectureTiersEnum".
 */
export declare type AppArchitectureTiersEnum = "FisUserInterface" | "FisApplicationServer" | "SystemServers";
/**
 * Major UI components
 *
 * This interface was referenced by `FisAppMessage`'s JSON-Schema
 * via the `definition` "UserInterfaceComponentTypesEnum".
 */
export declare type UserInterfaceComponentTypesEnum = "Presentation" | "GlobalStore" | "DomainProxy" | "Component";
/**
 * Major components of Fis Application server
 *
 * This interface was referenced by `FisAppMessage`'s JSON-Schema
 * via the `definition` "FisAppServerComponentsEnum".
 */
export declare type FisAppServerComponentsEnum = "UserClientProxy" | "NetworkController" | "BackOfficeApplication" | "MircroServiceHandler" | "QueryModule" | "NotificaationManager" | "GlobalStore";
/**
 * System softwares. Windows, NodeJs, NestJS, MicroserviceServers etc
 *
 * This interface was referenced by `FisAppMessage`'s JSON-Schema
 * via the `definition` "SystemServersEnum".
 */
export declare type SystemServers = "OperatingSystem" | "Webservers" | "Database" | "ApplicationStake" | "QuerySystem" | "Network" | "MicroserviceServer";
/**
 * For UI Events, MS Events, NestJS Events, FIS Events
 *
 * This interface was referenced by `FisAppMessage`'s JSON-Schema
 * via the `definition` "NotificationTypeEnum".
 */
export declare type NotificationType = "UserActivity" | "BusinessEvent" | "AppServerEvent" | "NetworkSystemEvent" | "SystemServerEvent";
/**
 * This interface was referenced by `FisAppMessage`'s JSON-Schema
 * via the `definition` "NotificationNatureEnum".
 */
export declare type NotificationNature = "Exception" | "ActionRequired" | "ForInformation";
/**
 * List of commands
 *
 * This interface was referenced by `FisAppMessage`'s JSON-Schema
 * via the `definition` "CommandEnum".
 */
export declare type CommandEnum = "New" | "Update" | "Delete" | "SetFieldValue" | "Save" | "Cancel" | "Commit";
/**
 * Query request.
 *
 * This interface was referenced by `FisAppMessage`'s JSON-Schema
 * via the `definition` "QueryEnum".
 */
export declare type QueryEnum = "General";
/**
 * Request to subscribe messages
 *
 * This interface was referenced by `FisAppMessage`'s JSON-Schema
 * via the `definition` "SubscriptionEnum".
 */
export declare type SubscriptionEnum = "General";
/**
 * Response on status of request performance.
 *
 * This interface was referenced by `FisAppMessage`'s JSON-Schema
 * via the `definition` "ResponseStatusEnum".
 */
export declare type ResponseStatusEnum = "AcknowledgeReceived" | "PendingExecution" | "ExecutionInProgress" | "ExecutiionCompletePercentage" | "ExecutionCompleted";
/**
 * Response exception types
 *
 * This interface was referenced by `FisAppMessage`'s JSON-Schema
 * via the `definition` "ResponseExceptionEnum".
 */
export declare type ResponseExceptionEnum = "ValidationFailed" | "InvalidRequest" | "UnAuthorisedRequest";
/**
 * Mapping of visual controls to logical control types. Buttons and Menu items are consider logically as a Command control.
 *
 * This interface was referenced by `FisAppMessage`'s JSON-Schema
 * via the `definition` "UserInterfaceControlTypesEnum".
 */
export declare type UserInterfaceControlTypes = "Panel" | "Command" | "Field";
/**
 * Common functions that appeats in all logical controls.
 *
 * This interface was referenced by `FisAppMessage`'s JSON-Schema
 * via the `definition` "UserInterfaceControlCommonFunctionsEnum".
 */
export declare type UserInterfaceControlsCommonFunctions = "Enable" | "Disable" | "Hide" | "Unhide" | "Selected" | "ShowOptions" | "ShowDescriptions";
/**
 * Visual control events to be mapped to this panel functions. Extend from common functions
 *
 * This interface was referenced by `FisAppMessage`'s JSON-Schema
 * via the `definition` "UserInterfaceControlPanelFunctionsEnum".
 */
export declare type UserInterfaceControlsPanelFunctions = UserInterfaceControlsCommonFunctions & ("OPEN" | "CLOSE" | "SCROLL-UP" | "SCROLL-DOWN" | "SCROLL-RIGHT" | "SCROLL-LEFT" | "MAXIMISE" | "MINIMISE" | "OPEN-CHILD" | "CLOSE-CHILD" | "COMMAND-SELECTED" | "PROPERTY-CHANGED" | "SET-TITLE");
/**
 * Logical Command controls functions.
 *
 * This interface was referenced by `FisAppMessage`'s JSON-Schema
 * via the `definition` "UserInterfaceControlCommandFunctionsEnum".
 */
export declare type UserInterfaceControlCommandFunctionsEnum = UserInterfaceControlsCommonFunctions & ("EXECUTE" | "SHOW-DETAILS" | "SHOW-CHILD-COMMAND" | "ENABLE" | "DISABLE");
/**
 * Logical field controls functions.
 *
 * This interface was referenced by `FisAppMessage`'s JSON-Schema
 * via the `definition` "UserInterfaceControlFieldFunctionsEnum".
 */
export declare type UserInterfaceControlFieldFunctionsEnum = UserInterfaceControlsCommonFunctions & ("ValueChanged" | "Undo" | "Redo" | "SetValue");
/**
 * Possible statuses of a Request
 *
 * This interface was referenced by `FisAppMessage`'s JSON-Schema
 * via the `definition` "RequestStatuseEnum".
 */
export declare type RequestStatuse = "RequestReceived" | "RequestInProcess" | "RequestCancelled" | "RequestEnded" | "ProcessingRequestFailed" | "ProcessingRequestSuccessful";
/**
 * Information required for message integration with FIS back office for Request message. Defination as composition and hence do not extend from any message header definition,
 *
 * This interface was referenced by `FisAppMessage`'s JSON-Schema
 * via the `definition` "FisTmInformation".
 */
export declare type FisTmInformation = string;
/**
 * List of FIS commands, extended from Command.
 *
 * This interface was referenced by `FisAppMessage`'s JSON-Schema
 * via the `definition` "FisTmCommandEnum".
 */
export declare type FisCommand = "New" | "Retrieve" | "Modify" | "setColumn";
/**
 * This interface was referenced by `FisAppMessage`'s JSON-Schema
 * via the `definition` "FisTmQueryEnum".
 */
export declare type FisTmQueryEnum = unknown;
export interface FisAppMessage {
    FisAppMessage: Message;
}
/**
 * Payload data has the actual message sent by producer.
 *
 * This interface was referenced by `FisAppMessage`'s JSON-Schema
 * via the `definition` "Message".
 */
export interface Message {
    message?: {
        requestMessage?: RequestMessage;
    } | {
        responseMessage?: ResponseMessage;
    } | {
        notificationMessage?: NotificationMessage;
    };
}
/**
 * This interface was referenced by `FisAppMessage`'s JSON-Schema
 * via the `definition` "RequestMessage".
 */
export interface RequestMessage {
    requestMessageHeader?: RequestMessageHeader;
    requestMessageData?: unknown;
}
/**
 * A Request can be a Command or a Query. Abstract definition and can not existing by itself. Name of request only appear at concrete type.
 *
 * This interface was referenced by `FisAppMessage`'s JSON-Schema
 * via the `definition` "RequestMessageHeader".
 */
export interface RequestMessageHeader {
    messageHeader: MessageHeader;
    /**
     * Client that request defines what sort of response expected.
     */
    responseRequirement?: {
        responseDeliveryMode?: MessageDeliveryMode;
        responseDataFormat?: MessageFormat;
        externalResponseLocation?: ExternalMessageLocation;
    };
    /**
     * If not completed within stipulated time (since message created), then cancel request. Time out in milli seconds. 0-no time out.
     */
    resquestTimeOut?: number;
    /**
     * To execute after a specified certain time (since message created), 0 as immediate, -1 as batch que
     */
    requestExecutionMode?: number;
}
/**
 * Common information for all messages. Usually used by the Controller to direct message to an appropriate handler (or service).
 *
 * This interface was referenced by `FisAppMessage`'s JSON-Schema
 * via the `definition` "MessageHeader".
 */
export interface MessageHeader {
    /**
     * Unique identifier of every message
     */
    messageID: string;
    /**
     * Short description of this message. Value can be auto populated by factory.
     */
    messageName: string;
    /**
     * The date time that the message was created by the factory
     */
    dateCreated: string;
    /**
     * Whether the message data is an aggregate of messages.If true then the aggregate messages are contained in the MessageData section as array of messages.
     */
    isAggregate: boolean;
    messageProducerInformation: MessageProducerInformation;
    /**
     * Authentication and authorization information
     */
    security: {
        /**
         * Social network user id that user log on. can be null and in which case user did not use social network user id to log in but instead directly log on using FisApp user id. Note that a client can be a daemon process and in which case it also has a log in id.
         */
        socialNetworkLoginID?: string;
        /**
         * user application session client proxy. can be null if user has not log in
         */
        ucpId?: string;
        /**
         * name of social network user
         */
        socialNetworkUserName?: string;
        /**
         * FIS User ID.
         */
        applicationLogInID?: string;
        /**
         * name of application user
         */
        applicationUserName?: string;
    };
    messagedataLocation?: ExternalMessageLocation;
    messageDataFormat?: MessageFormat;
}
/**
 * Origin location ( as in app architeture components) where this message is created. Note that as message is passed to a component, a new message may be created to wrap around the first message.
 *
 * This interface was referenced by `FisAppMessage`'s JSON-Schema
 * via the `definition` "MessageProducerInformation".
 */
export interface MessageProducerInformation {
    messageProducerInformation?: {
        uiMessage?: {
            messageOriginBase: MessageProducerInformationBase;
            UIArchitectureComponents: UserInterfaceComponentTypesEnum;
        };
    } | {
        fisAppServerMessage?: {
            messageOriginBase?: MessageProducerInformationBase;
            AppServerComponents?: FisAppServerComponentsEnum;
        };
    } | {
        systemServersMessage?: {
            messageOriginBase: MessageProducerInformationBase;
            systemServers: SystemServers;
        };
    };
}
/**
 * Location of source program that generated this message
 *
 * This interface was referenced by `FisAppMessage`'s JSON-Schema
 * via the `definition` "MessageProducerInformationBase".
 */
export interface MessageProducerInformationBase {
    programID?: string;
    programName?: string;
    messageFactoryType?: FactoryTypeEnum;
    appArchitectureTiers?: AppArchitectureTiersEnum;
    userApplication: UserApplication;
}
/**
 * Applications as login by user. Is a logical application with a  collection of programs to perform some related business functions. It referrrs to one or more back office applications under the User-BackOffice relationship entity. Example, FisPayment, PlantationFiledApp, FisSalesForce.
 *
 * This interface was referenced by `FisAppMessage`'s JSON-Schema
 * via the `definition` "UserApplication".
 */
export interface UserApplication {
    userAppId: string;
    userAppName: string;
}
/**
 * Compositable definition. Can be included in message header or message data. For non-embaded data, specific location where data can be read. Applicatiion for all message action type.
 *
 * This interface was referenced by `FisAppMessage`'s JSON-Schema
 * via the `definition` "MessageDataLocation".
 */
export interface ExternalMessageLocation {
    isEmbaded: boolean;
    url?: string;
    accessId?: string;
    accessPassword?: string;
    fileName?: string;
}
/**
 * Compositable definition. Data message format details which is required in different types of messages. Format can be used (1) defining message when establishing commuincation protocal  (2) defining message data section (3) defining a field in the message data section
 *
 * This interface was referenced by `FisAppMessage`'s JSON-Schema
 * via the `definition` "MessageFormat".
 */
export interface MessageFormat {
    /**
     * Applicable for report query.
     */
    dataFormat: "Json" | "Xml" | "Blob" | "Dtf";
    /**
     * File type in which the message is kept. Usually correcspond to the file extension
     */
    fileFormat?: "Pdf" | "Text" | "Html" | "PrintFile";
    /**
     * The response data schema type.
     */
    schemaType?: "FisFieldValue" | "FisMetada" | "GraphQl" | "JsonSchema" | "Soap" | "Wsdl";
    mediaType?: "Audio" | "Video" | "Image" | "Text";
}
/**
 * Compositable definition. How message is to be delivered. Usually though not mendatory is as requested by client. If not specidied then leave to default transport handler. Applicable more for a requesting client message to specify how response messages should be delivered back.
 *
 * This interface was referenced by `FisAppMessage`'s JSON-Schema
 * via the `definition` "MessageDeliveryMode".
 */
export interface MessageDeliveryMode {
    /**
     * Interactive message exchange or batch delayed. Interactive reponse is immediate by individually message continuous streaming. Batched messages are collected for one delivery.
     */
    timing: "Interactive" | "Batch";
    /**
     * Identifier for a particular transport channel to use.
     */
    channelId?: string;
}
/**
 * This interface was referenced by `FisAppMessage`'s JSON-Schema
 * via the `definition` "ResponseMessage".
 */
export interface ResponseMessage {
    responseMessageHeader?: ResponseMessageHeader;
    responseMessageData?: unknown;
}
/**
 * This interface was referenced by `FisAppMessage`'s JSON-Schema
 * via the `definition` "ResponseMessageHeader".
 */
export interface ResponseMessageHeader {
    messageHeader: MessageHeader;
    requestMessageRespondTo: RequestMessage;
}
/**
 * This interface was referenced by `FisAppMessage`'s JSON-Schema
 * via the `definition` "NotificationMessage".
 */
export interface NotificationMessage {
    notificationMessageHeader: NotificationMessageHeader;
    notificationMessageData: unknown;
}
/**
 * Base notification message Header. Notification is at time named as event.
 *
 * This interface was referenced by `FisAppMessage`'s JSON-Schema
 * via the `definition` "NotificationMessageHeader".
 */
export interface NotificationMessageHeader {
    messageHeader: MessageHeader;
    notificationType: NotificationType;
    notificationNature: NotificationNature;
}
/**
 * This interface was referenced by `FisAppMessage`'s JSON-Schema
 * via the `definition` "commandMessage".
 */
export interface CommandMessage {
    commandMessageHeader: CommandMessageHeader;
    commandMessageData: unknown;
}
/**
 * This interface was referenced by `FisAppMessage`'s JSON-Schema
 * via the `definition` "CommandMessageHeader".
 */
export interface CommandMessageHeader {
    requestMessageHeader: RequestMessageHeader;
    command: CommandEnum;
}
/**
 * This interface was referenced by `FisAppMessage`'s JSON-Schema
 * via the `definition` "QueryMessage".
 */
export interface QueryMessage {
    queryMessageHeader: QueryMessageHeader;
    queryMessageData: unknown;
}
/**
 * A Request can be a Command or a Query. Abstract definition and can not existing by itself. Name of request only appear at concrete type.
 *
 * This interface was referenced by `FisAppMessage`'s JSON-Schema
 * via the `definition` "QueryMessageHeader".
 */
export interface QueryMessageHeader {
    requestMessageHeader: RequestMessageHeader;
    query: QueryEnum;
}
/**
 * This interface was referenced by `FisAppMessage`'s JSON-Schema
 * via the `definition` "SubscriptionMessage".
 */
export interface SubscriptionMessage {
    subscriptionMessageHeader: SubscriptionMessageHeader;
    subscriptionMessageData: unknown;
}
/**
 * Request to subscribe notifications (or events). Note that notification can be emitted from UI, Business Domain, Databases and other application tiers. Regardless, the notification and subscription each has format used consistently across all application tiers. What events to subscribes are provided in the message data section.
 *
 * This interface was referenced by `FisAppMessage`'s JSON-Schema
 * via the `definition` "SubscriptionMessageHeader".
 */
export interface SubscriptionMessageHeader {
    requestMessageHeader: RequestMessageHeader;
    subscription: SubscriptionEnum;
    /**
     * effect date time when to start subscribing. Default is right now.
     */
    startSubscribingDateTime?: string;
    /**
     * effect date time when to end subscribing. Default is year 2999 which means forever.
     */
    endSubscribingDateTime?: string;
}
/**
 * This interface was referenced by `FisAppMessage`'s JSON-Schema
 * via the `definition` "ResponseDataMessage".
 */
export interface ResponseDataMessage {
    reponseMessage: ResponseMessage;
    /**
     * Data returned from successful request operation
     */
    responseDataMessageData: {
        [k: string]: unknown;
    };
}
/**
 * This interface was referenced by `FisAppMessage`'s JSON-Schema
 * via the `definition` "ResponseStatusMessage".
 */
export interface ResponseStatusMessage {
    responseStatusMessageHeader: ResponseStatusMessageHeader;
    /**
     * Data returned from successful request operation
     */
    ResponseStatusMessageData: {
        [k: string]: unknown;
    };
}
/**
 * This interface was referenced by `FisAppMessage`'s JSON-Schema
 * via the `definition` "ResponseStatusMessageHeader".
 */
export interface ResponseStatusMessageHeader {
    responseMessageHeader: ResponseMessageHeader;
    NewProperty: ResponseStatusEnum;
}
/**
 * This interface was referenced by `FisAppMessage`'s JSON-Schema
 * via the `definition` "ResponseExceptionMessage".
 */
export interface ResponseExceptionMessage {
    responseExceptionMessageHeader: ResponseExceptionMessageHeader;
    responseExceptionMessageData: unknown;
}
/**
 * This interface was referenced by `FisAppMessage`'s JSON-Schema
 * via the `definition` "ResponseExceptionMessageHeader".
 */
export interface ResponseExceptionMessageHeader {
    responseMessageHeader: ResponseMessageHeader;
    responseException: ResponseExceptionEnum;
}
/**
 * This interface was referenced by `FisAppMessage`'s JSON-Schema
 * via the `definition` "ResponseSubscriptionMessage".
 */
export interface ResponseSubscriptionMessage {
    ResponseSubscriptionMessage: {
        ReponseMessage: ResponseMessage;
    } & {
        SubscribedMessageData: Message;
    };
    responseSubscriptionMessageData?: ResponseSubscriptionMessageData;
}
/**
 * This interface was referenced by `FisAppMessage`'s JSON-Schema
 * via the `definition` "ResponseSubscriptionMessageData".
 */
export interface ResponseSubscriptionMessageData {
    subscribedMessage: Message;
}
/**
 * This interface was referenced by `FisAppMessage`'s JSON-Schema
 * via the `definition` "MicroserviceNotificationMessage".
 */
export interface MicroserviceNotificationMessage {
    microserviceNotifcationMessageHeader: MicroserviceNotifcationMessageHeader;
    microserviceNotifcationMessageData?: Message;
}
/**
 * All messages sent over microservice is in fisapp context considered as Notification messages
 *
 * This interface was referenced by `FisAppMessage`'s JSON-Schema
 * via the `definition` "MicroserviceNotifcationMessageHeader".
 */
export interface MicroserviceNotifcationMessageHeader {
    notificationMessageHeader?: NotificationMessageHeader;
    /**
     * Similar in usage to Kafka topic. This literal object is used in NestJS microservice client cp header
     */
    micrroServicetopic: {
        topicId: string;
        topicCode: string;
        topicName: string;
    };
}
/**
 * This interface was referenced by `FisAppMessage`'s JSON-Schema
 * via the `definition` "ResponseSubscriptionMessageHeader".
 */
export interface ResponseSubscriptionMessageHeader {
    responseMessageHeader: ResponseMessageHeader;
}
/**
 * Various ERP system running on the server side. Example FisBackOffice, FisEcommerce etc
 *
 * This interface was referenced by `FisAppMessage`'s JSON-Schema
 * via the `definition` "BackOfficeApplication".
 */
export interface BackOfficeApplication {
    backOfficeAppId: string;
    backOfficeAppName: string;
    [k: string]: unknown;
}
/**
 * Message filter is based on GraphQl query schema concept. Message object with sfield values are the condition filter.
 *
 * This interface was referenced by `FisAppMessage`'s JSON-Schema
 * via the `definition` "MessageFilter".
 */
export interface MessageFilter {
    MessageFilterCondition?: Message;
}
/**
 * A general UI React Control Item event message for events such as mouse over, property changed, onclick etc. In the case of UI, the term Notification and Event is used interchangeably. A message will contain only one event (which is passed in the message data section). Should be an Interface Type
 *
 * This interface was referenced by `FisAppMessage`'s JSON-Schema
 * via the `definition` "UIEventMessage".
 */
export interface UIEventMessage {
    UIEventMessage?: NotificationMessageHeader & {
        /**
         * ?? to define various UI notification type.
         */
        UIEventType: "MouseAction" | "ValueChanged" | "???";
        /**
         * The Ng Component that generated the event. For now is just a string. Later make it a reference to a Component schema
         */
        SourceComponent?: string;
        /**
         * The type of control item (MENU, FIELD, WINDOW, LINKS) that generated the event. There should be enum value for types of controls.
         */
        SourceComponentControlType?: string;
    };
}
/**
 * This interface was referenced by `FisAppMessage`'s JSON-Schema
 * via the `definition` "UIVisualControlAttributes".
 */
export interface UIVisualControlAttributes {
    [k: string]: unknown;
}
/**
 * This interface was referenced by `FisAppMessage`'s JSON-Schema
 * via the `definition` "FisTmCommandMessage".
 */
export interface FisTmCommandMessage {
    fisTmCommandMessageHeader: FisTmCommandMessageHeader;
    fisTmCommandData: unknown;
}
/**
 * This interface was referenced by `FisAppMessage`'s JSON-Schema
 * via the `definition` "FisTmCommandMessageHeader".
 */
export interface FisTmCommandMessageHeader {
    fisRequestMessageHeader: FisTmRequestMessageHeader;
    command: FisCommand;
}
/**
 * General Fis Taskmanager request information.
 *
 * This interface was referenced by `FisAppMessage`'s JSON-Schema
 * via the `definition` "FisTmRequestMessageHeader".
 */
export interface FisTmRequestMessageHeader {
    requestMessageHeader: RequestMessageHeader;
    fisTmInformation: FisTmInformation;
}
/**
 * This interface was referenced by `FisAppMessage`'s JSON-Schema
 * via the `definition` "FisTmQueryMessage".
 */
export interface FisTmQueryMessage {
    fisTmQueryMessageHeader: FisTmQueryMessageHeader;
    fisTmQueryMessageData: unknown;
}
/**
 * This interface was referenced by `FisAppMessage`'s JSON-Schema
 * via the `definition` "FisTmQueryMessageHeader".
 */
export interface FisTmQueryMessageHeader {
    fisTmRequestMessageHeader: FisTmRequestMessageHeader;
    query: FisTmQueryEnum;
}
/**
 * This interface was referenced by `FisAppMessage`'s JSON-Schema
 * via the `definition` "FisTmResponseMessage".
 */
export interface FisTmResponseMessage {
    fisTmResponseMessageHeader: FisTmResponseMessageHeader;
    fisTmResponseMessageData: unknown;
}
/**
 * This interface was referenced by `FisAppMessage`'s JSON-Schema
 * via the `definition` "FisTmResponseMessageHeader".
 */
export interface FisTmResponseMessageHeader {
    responseMessageHeader: ResponseMessageHeader;
    NewProperty: FisTmInformation;
}
