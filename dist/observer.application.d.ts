import { NotificationMessage } from "./_dependencies/DP/src/interface/export";
import { DomainProxyController } from "./_dependencies/DP/src/services/DP.controller";
import { Subject } from 'rxjs';
import { base_notification_handler_class } from './base/base_notification_handler';
import { HandlersManager } from './handlers_manager';
import { MessageAuditorService } from './_dependencies/Audit/services/message-auditor.service';
import { ZKTFingerprintService } from './fingerprint/_utility/app.zkt_fingerprint.service';
export declare class ObserverApplication {
    DPC: DomainProxyController;
    private messageAuditService;
    private TurnOffFingerprintApp;
    private synchronizationTrigger;
    private ApplicationName;
    private ucp;
    private notificationMessage;
    private messageLogingservice;
    private loggingSettings;
    private sourceSetting;
    private targetSetting;
    private syncConfig;
    FisHandler: base_notification_handler_class;
    ServiceId_for_employee_profile: string;
    new_employee_profile_tag: string;
    add_employee_profile_tag: string;
    modified_employee_profile_tag: string;
    default_tag: string;
    processManager: HandlersManager;
    ZKTFpService: ZKTFingerprintService;
    constructor(DPC: DomainProxyController, messageAuditService: MessageAuditorService);
    start(): Promise<void>;
    get_application_name(): string;
    synchronization_start(): void;
    get_synchronization_observerable(): Subject<any>;
    get_logging_observerable(): Subject<NotificationMessage>;
    get_handler_with_Tag(tag: string): base_notification_handler_class;
    checkInitialisation(): boolean;
    getProcessingObservableInstance(): Subject<any>;
    private subscribeNotificationFromUcp;
    private getUCPid;
    fileOperation(): Promise<void>;
}
export declare let application: ObserverApplication;
