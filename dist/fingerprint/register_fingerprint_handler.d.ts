import { handler_interface } from "../base/base_notification_handler";
import { AxiosRequestConfig } from "axios";
import { fingerprint_class } from "./fingerprint_handler";
import { Subject } from 'rxjs';
import { ZKTFingerprintService } from "./_utility/app.zkt_fingerprint.service";
import { eventMessageInterface, handleResponseInterface } from "../_interface/fingerprintdata.interface";
import { ResponseMessage } from "../_dependencies/DP/src/interface/export";
export declare class register_fingerprint_class extends fingerprint_class implements handler_interface {
    app: string;
    UCP_Id: string;
    n8n_url: string;
    deviceNo: string;
    temporaryCode: string;
    previous_UCP_Id: string;
    eventMsgData: string;
    eventMessageAllData: any[];
    isError: handleResponseInterface;
    ZKTFpService: ZKTFingerprintService;
    eventMessageDataRegStat: eventMessageInterface[];
    fpTemplate: string;
    private siteLocation;
    private javaServer;
    private FINGER_EDGE_THRESHOLD;
    private FINGER_SCORE_THRESHOLD;
    private FINGERPRINT_VERIFICATION_MODULE;
    private LOCATION;
    constructor();
    setZKTFingerprintService(): Promise<void>;
    getEventMessageData(): Promise<void>;
    filteredLatestDateEventMessageData(): Promise<void>;
    send_message(handler_id: number, steps_id: number): Promise<ResponseMessage>;
    http_config: AxiosRequestConfig;
    handler_id: number;
    subscribeForRegisterFPReceived(inputObservable: Subject<any>): Subject<unknown>;
    subscribeForRegistrationFPStarted(inputObservable: Subject<any>): Subject<unknown>;
    subscribeForRegisterFPInProgressRequested(inputObservable: Subject<any>): Subject<unknown>;
    subscribeForRegisterFPInProgress(inputObservable: Subject<any>): Subject<unknown>;
    subscribeForRegisteredFPCompletedRequested(inputObservable: Subject<any>): Subject<unknown>;
    subscribeForRegisteredFPCompleted(inputObservable: Subject<any>): Subject<unknown>;
    subscribeForProcessingCompleted(inputObservable: Subject<any>): Subject<unknown>;
    subscribeForProcessingError(inputObservable: Subject<any>): Subject<unknown>;
}
